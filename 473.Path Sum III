# STATEMENT OF PROBLEM

Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.

The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).

==================================================================================================================================================================================

## SOLUTION FOR PROBELM (IN JAVA)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int noOfPath(TreeNode root,long targetSum){
        
        if(root==null) return 0;
        int count=0;
        if((long)(root.val)==targetSum) count++;

        return count+noOfPath(root.left,targetSum-(long)(root.val))+noOfPath(root.right,targetSum-(long)(root.val));
    }
    public int pathSum(TreeNode root, int targetSum) {
       if(root==null) return 0;
       int count=noOfPath(root,(long)(targetSum));
       count += pathSum(root.left, targetSum );
       count += pathSum(root.right, targetSum);

       return count; 
    }
}

==============================================================================================================================================================================

## COMPLEXITIES

1.)TIME COMPLEXITY :- O(n^2)
2.)SPACE COMPLEXITY :- O(n^2)(worst case -> skewed tree) O(n logn) (best case -> balanced binary tree)

==============================================================================================================================================================================
