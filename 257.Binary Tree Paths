# STATEMENT OF CODE 

Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

===============================================================================================================================================================================

## SOLUTION IN JAVA 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void helper(TreeNode root, List<String>result,String s){
        if(root==null) return;
        if(root.left==null && root.right==null){
            s+=root.val;
            result.add(s);
            return;
        } 
        helper(root.left,result,s+root.val+"->");
        helper(root.right,result,s+root.val+"->");
    }
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> result=new ArrayList<>();
        helper(root,result,"");
        return result;
    }
}

===============================================================================================================================================================================

## COMPLEXITY 

1.)TIME COMPLEXITY :-O(n*h)
2.)SPACE COMPLEXITY :-O(n*h)

===============================================================================================================================================================================
