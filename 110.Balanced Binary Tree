# STATEMENT OF PROBLEM 

Given a binary tree, determine if it is height-balanced.

* A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.

===============================================================================================================================================================================

## SOLUTION IN JAVA 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public  int height(TreeNode root){
        if(root==null ||(root.left==null && root.right==null)){
            return 0;
        }
        return 1+Math.max(height(root.left),height(root.right));
    }
    public boolean isBalanced(TreeNode root) {
        if(root==null) return true;
        int lh=height(root.left);
        if(root.left!=null) lh++;
        int rh=height(root.right);
        if(root.right!=null) rh++;
        int dis=lh-rh;
        if(dis<0) dis=-dis;
        if(dis>1) return false;
        return (isBalanced(root.right)&&isBalanced(root.left));
    }
}

==============================================================================================================================================================================

## COMPLEXITIES

1.)TIME COMPLEXITY :-O(n)
2.)SPACE COMPLEXITY :- O(1)

==============================================================================================================================================================================
