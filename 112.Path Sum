# STATEMENT OF PROBLEM 

Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.

A leaf is a node with no children.

==================================================================================================================================================================================

## SOLUTION IN JAVA 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root!=null && root.left==null && root.right==null){
            if(root.val==targetSum) return true;
        }
        if(root==null){
            return false;
        }
        return hasPathSum(root.left,targetSum-root.val) || hasPathSum(root.right,targetSum-root.val);
    }
}

==============================================================================================================================================================================

## COMPLEXITIES 

1.)TIME COMPLEXITY :-O(logn) (best case) , O(n) (worst case) 
2.)SPACE COMPLEXITY :-O(1)

==============================================================================================================================================================================
