# STATEMENT OF PROBLEM 

Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, 
then right to left for the next level and alternate between).

==================================================================================================================================================================================

## SOLUTION IN JAVA 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int height(TreeNode root){
        if(root==null ||(root.left==null && root.right==null)){
            return 0;
        }
        return 1+Math.max(height(root.left),height(root.right));
    }
    public void traversalLR(TreeNode root, int n ,List<Integer> result){
        if(root==null ){
            return ;
        }
        if(n==1){
            result.add(root.val);
        }
        traversalLR(root.left,n-1,result);
        traversalLR(root.right,n-1,result);

    }
    public void traversalRL(TreeNode root, int n ,List<Integer> result){
        if(root==null){
            return ;
        }
        if(n==1){
            result.add(root.val);
        }
        traversalRL(root.right,n-1,result);
        traversalRL(root.left,n-1,result);
    }
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        
        List<List<Integer>> finalResult=new ArrayList<>();
        if(root==null ){
            return finalResult;
        }
        int level=1 + height(root);
        for(int i=1;i<=level;i++){
            List<Integer> result=new ArrayList<>();
            if(i%2==0){
                traversalRL(root,i,result);
            }else{
            traversalLR(root,i,result);
            }
            finalResult.add(result);
        }
        return finalResult;
    }
}


==================================================================================================================================================================================

## COMPLEXITIES :-

1.)TIME COMPLEXITY :- O(nlogn) , balanced binary tree and O(n^2) , worst case
2.)SPACE COMPLEXITY :-O(n)

==================================================================================================================================================================================
