# STATEMENT OF PROBLEM 

Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, 
construct and return the binary tree.

==================================================================================================================================================================================

## SOLUTION IN JAVA 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode helper(int[] preorder, int prelo, int prehi, int[] inorder, int inlo,int inhi){
        if(prelo>prehi) return null;
        TreeNode root=new TreeNode(preorder[prelo]);
        int i=inlo;
        while(inorder[i]!=preorder[prelo]){
            i++;
        }    
        int leftSize= i-inlo;
        root.left=helper(preorder,prelo+1,prelo+leftSize,inorder,inlo,i-1);
        root.right=helper(preorder,prelo+leftSize+1,prehi,inorder,i+1,inhi);
        return root;
    }
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int n=preorder.length;
        return helper(preorder,0,n-1,inorder,0,n-1);
        
    }
}

==================================================================================================================================================================================

## COMPLEXITIES :-

1.) Time Complexity :-O(n^2)
2.) Space Complexity :-O(n)

==================================================================================================================================================================================
